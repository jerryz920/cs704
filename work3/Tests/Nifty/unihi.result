(define (main a)
  (call foldSum 0
    (call mulPairs-[quote_[23_42_68_39_20_19]]
      (cons a (quote (19 24 -73 16 34))))))
(define (foldSum acc l)
  (if (nil? l) acc (call foldSum (+ (car l) acc) (cdr l))))
(define (mulPairs-[quote_[23_42_68_39_20_19]] list2)
  (cons (* 23 (car list2))
    (call mulPairs-[quote_[42_68_39_20_19]] (cdr list2))))
(define (mulPairs-[quote_[42_68_39_20_19]] list2)
  (cons (* 42 (car list2)) (call mulPairs-[quote_[68_39_20_19]] (cdr list2))))
(define (mulPairs-[quote_[68_39_20_19]] list2)
  (cons (* 68 (car list2)) (call mulPairs-[quote_[39_20_19]] (cdr list2))))
(define (mulPairs-[quote_[39_20_19]] list2)
  (cons (* 39 (car list2)) (call mulPairs-[quote_[20_19]] (cdr list2))))
(define (mulPairs-[quote_[20_19]] list2)
  (cons (* 20 (car list2)) (call mulPairs-[quote_[19]] (cdr list2))))
(define (mulPairs-[quote_[19]] list2)
  (cons (* 19 (car list2)) (call mulPairs-nil (cdr list2))))
(define (mulPairs-nil list2) nil)
